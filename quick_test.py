#!/usr/bin/env python3\n\n\"\"\"\nQuick and dirty test runner for when I don't want to use the full ROS 2 launch system.\n\nUsage: python3 quick_test.py [test_name]\n\nAvailable tests:\n- basic: Just run the test manager once\n- ping: Start the simple ping test\n- all: Run everything\n\nThis is just for development - use the proper ROS 2 commands for real testing.\n\"\"\"\n\nimport subprocess\nimport sys\nimport time\nimport os\n\ndef run_command(cmd, timeout=10):\n    \"\"\"Run a command and return the result.\"\"\"\n    try:\n        print(f\"Running: {' '.join(cmd)}\")\n        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)\n        if result.returncode != 0:\n            print(f\"Command failed: {result.stderr}\")\n        return result.returncode == 0\n    except subprocess.TimeoutExpired:\n        print(f\"Command timed out after {timeout}s\")\n        return False\n    except Exception as e:\n        print(f\"Command error: {e}\")\n        return False\n\ndef check_ros_sourced():\n    \"\"\"Make sure ROS 2 is sourced.\"\"\"\n    if 'ROS_DISTRO' not in os.environ:\n        print(\"❌ ROS 2 doesn't seem to be sourced\")\n        print(\"Try: source /opt/ros/humble/setup.bash\")\n        return False\n    print(f\"✓ ROS 2 {os.environ['ROS_DISTRO']} is sourced\")\n    return True\n\ndef test_basic():\n    \"\"\"Run basic system test.\"\"\"\n    print(\"\\n=== BASIC SYSTEM TEST ===\")\n    success = run_command(['ros2', 'run', 'rover_system_tests', 'test_manager_node'], timeout=30)\n    return success\n\ndef test_ping():\n    \"\"\"Run communication ping test.\"\"\"\n    print(\"\\n=== COMMUNICATION PING TEST ===\")\n    print(\"Starting responder in background...\")\n    \n    # Start a responder\n    responder = subprocess.Popen(\n        ['ros2', 'run', 'simple_test_system', 'responder_node'],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE\n    )\n    \n    # Give it a moment to start\n    time.sleep(2)\n    \n    # Run the tester\n    success = run_command(['ros2', 'run', 'simple_test_system', 'tester_node'], timeout=15)\n    \n    # Clean up\n    responder.terminate()\n    try:\n        responder.wait(timeout=3)\n    except subprocess.TimeoutExpired:\n        responder.kill()\n    \n    return success\n\ndef test_all():\n    \"\"\"Run all available tests.\"\"\"\n    print(\"\\n=== RUNNING ALL TESTS ===\")\n    \n    results = {\n        'basic': test_basic(),\n        'ping': test_ping()\n    }\n    \n    print(\"\\n=== RESULTS ===\")\n    for test_name, passed in results.items():\n        status = \"✅ PASS\" if passed else \"❌ FAIL\"\n        print(f\"{status} {test_name}\")\n    \n    passed_count = sum(results.values())\n    total_count = len(results)\n    print(f\"\\nOverall: {passed_count}/{total_count} tests passed\")\n    \n    return passed_count == total_count\n\ndef main():\n    if not check_ros_sourced():\n        sys.exit(1)\n    \n    test_name = sys.argv[1] if len(sys.argv) > 1 else 'basic'\n    \n    if test_name == 'basic':\n        success = test_basic()\n    elif test_name == 'ping':\n        success = test_ping()\n    elif test_name == 'all':\n        success = test_all()\n    else:\n        print(f\"Unknown test: {test_name}\")\n        print(\"Available: basic, ping, all\")\n        sys.exit(1)\n    \n    if success:\n        print(\"\\n🎉 Test completed successfully!\")\n        sys.exit(0)\n    else:\n        print(\"\\n💥 Test failed\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()
